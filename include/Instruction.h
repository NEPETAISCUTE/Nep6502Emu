#ifndef INSTRUCTION_H
#define INSTRUCTION_H

#include <stdint.h>

#include "CPU.h"

typedef uint8_t OpCode;

typedef enum InstructionAStandard {
	INSTRUCTIONA_ORA_ASL = 0,
	INSTRUCTIONA_BIT_AND_ROL = 1,
	INSTRUCTIONA_EOR_LSR = 2,
	INSTRUCTIONA_ADC_ROR = 3,
	INSTRUCTIONA_STY_STA_STX = 4,
	INSTRUCTIONA_LDY_LDA_LDX = 5,
	INSTRUCTIONA_CPY_CMP_DEC = 6,
	INSTRUCTIONA_CPX_SBC_INC = 7,
} InstructionAStandard;

typedef enum AdressingMode {
	ADDRESSING_MODE_INDEXED_X_INDIRECT = 0,
	ADDRESSING_MODE_ZEROPAGE = 1,
	ADDRESSING_MODE_IMMEDIATE = 2,
	ADDRESSING_MODE_ABSOLUTE = 3,
	ADDRESSING_MODE_INDIRECT_INDEXED_Y = 4,
	ADDRESSING_MODE_ZEROPAGE_INDEXED_X = 5,
	ADDRESSING_MODE_ABSOLUTE_INDEXED_Y = 6,
	ADDRESSING_MODE_ABSOLUTE_INDEXED_X = 7,
} AddressingMode;

#define DecodeInstructionA(opcode) (InstructionAStandard)(((opcode) & 0b11100000) >> 5)
#define DecodeInstructionB(opcode) (AddressingMode)(((opcode) & 0b11100) >> 2)
#define DecodeInstructionC(opcode) ((opcode) & 0b11)
#define IsInstructionSpecial(opcode) ((cPart) & 1 == 0 && (bPart) & 1 == 0)

typedef enum InstructionSpecial {
	INSTRUCTION_SPECIAL_BRK = 0x00,
	INSTRUCTION_SPECIAL_PHP = 0x08,
	INSTRUCTION_SPECIAL_BPL = 0x10,
	INSTRUCTION_SPECIAL_CLC = 0x18,

	INSTRUCTION_SPECIAL_JSR = 0x20,
	INSTRUCTION_SPECIAL_PLP = 0x28,
	INSTRUCTION_SPECIAL_BMI = 0x30,
	INSTRUCTION_SPECIAL_SEC = 0x38,

	INSTRUCTION_SPECIAL_RTI = 0x40,
	INSTRUCTION_SPECIAL_PHA = 0x48,
	INSTRUCTION_SPECIAL_BVC = 0x50,
	INSTRUCTION_SPECIAL_CLI = 0x58,

	INSTRUCTION_SPECIAL_RTS = 0x60,
	INSTRUCTION_SPECIAL_PLA = 0x68,
	INSTRUCTION_SPECIAL_BVS = 0x70,
	INSTRUCTION_SPECIAL_SEI = 0x78,

	INSTRUCTION_SPECIAL_BRA = 0x80,	 // WDC only
	INSTRUCTION_SPECIAL_DEY = 0x88,
	INSTRUCTION_SPECIAL_BCC = 0x90,
	INSTRUCTION_SPECIAL_TYA = 0x98,

	INSTRUCTION_SPECIAL_LDY_IMM = 0xA0,
	INSTRUCTION_SPECIAL_TAY = 0xA8,
	INSTRUCTION_SPECIAL_BCS = 0xB0,
	INSTRUCTION_SPECIAL_CLV = 0xB8,

	INSTRUCTION_SPECIAL_CPY_IMM = 0xC0,
	INSTRUCTION_SPECIAL_INY = 0xC8,
	INSTRUCTION_SPECIAL_BNE = 0xD0,
	INSTRUCTION_SPECIAL_CLD = 0xD8,

	INSTRUCTION_SPECIAL_CPX_IMM = 0xE0,
	INSTRUCTION_SPECIAL_INX = 0xE8,
	INSTRUCTION_SPECIAL_BEQ = 0xF0,
	INSTRUCTION_SPECIAL_SED = 0xF8,

	INSTRUCTION_SPECIAL_JMP_ABS = 0x4C,
	INSTRUCTION_SPECIAL_JMP_IND = 0x6C,

	// NOP 2 bytes 2 cycles = 0x02             WDC only
	INSTRUCTION_SPECIAL_ASL_A = 0x0A,
	INSTRUCTION_SPECIAL_ORA_PTR_ZPG_A = 0x12,  // WDC only
	INSTRUCTION_SPECIAL_INC_A = 0x1A,		   // WDC only

	// NOP 2 bytes 2 cycles = 0x22             WDC only
	INSTRUCTION_SPECIAL_ROL_A = 0x2A,
	INSTRUCTION_SPECIAL_AND_PTR_ZPG_A = 0x32,  // WDC only
	INSTRUCTION_SPECIAL_DEC_A = 0x3A,		   // WDC only

	// NOP 2 bytes 2 cycles = 0x42             WDC only
	INSTRUCTION_SPECIAL_LSR_A = 0x4A,
	INSTRUCTION_SPECIAL_EOR_PTR_ZPG_A = 0x52,  // WDC only
	INSTRUCTION_SPECIAL_PHY = 0x5A,			   // WDC only

	// NOP 2 bytes 2 cycles = 0x62             WDC only
	INSTRUCTION_SPECIAL_ROR_A = 0x6A,
	INSTRUCTION_SPECIAL_ADC_PTR_ZPG_A = 0x72,  // WDC only
	INSTRUCTION_SPECIAL_PLY = 0x7A,			   // WDC only

	// NOP 2 bytes 2 cycles = 0x82             WDC only
	INSTRUCTION_SPECIAL_TXA = 0x8A,
	INSTRUCTION_SPECIAL_STA_PTR_ZPG = 0x92,	 // WDC only
	INSTRUCTION_SPECIAL_TXS = 0x9A,

	INSTRUCTION_SPECIAL_LDX_IMM = 0xA2,
	INSTRUCTION_SPECIAL_TAX = 0xAA,
	INSTRUCTION_SPECIAL_LDA_PTR_ZPG = 0xB2,	 // WDC only
	INSTRUCTION_SPECIAL_TSX = 0xBA,

	// NOP 2 bytes 2 cycles = 0xC2             WDC only
	INSTRUCTION_SPECIAL_DEX = 0xCA,
	INSTRUCTION_SPECIAL_CMP_PTR_ZPG_A = 0xD2,  // WDC only
	INSTRUCTION_SPECIAL_PHX = 0xDA,			   // WDC only

	// NOP 2 bytes 2 cycles = 0xE2             WDC only
	INSTRUCTION_SPECIAL_NOP = 0xEA,
	INSTRUCTION_SPECIAL_SBC_PTR_ZPG_A = 0xF2,  // WDC only
	INSTRUCTION_SPECIAL_PLX = 0xFA,			   // WDC only

	// other weird cases for WDC exclusive instructions:

	// BIT
	INSTRUCTION_SPECIAL_BIT_IMM_A = 0x89,	 // WDC only
	INSTRUCTION_SPECIAL_BIT_ABS_X_A = 0x3C,	 // WDC only
	INSTRUCTION_SPECIAL_BIT_ZPG_X_A = 0x34,	 // WDC only

	// JMP (abs,x)
	INSTRUCTION_SPECIAL_JMP_IND_ABS_X = 0x7C,  // WDC only

	// BBR#
	INSTRUCTION_SPECIAL_BBR0 = 0x0F,  // WDC only
	INSTRUCTION_SPECIAL_BBR1 = 0x1F,  // WDC only
	INSTRUCTION_SPECIAL_BBR2 = 0x2F,  // WDC only
	INSTRUCTION_SPECIAL_BBR3 = 0x3F,  // WDC only
	INSTRUCTION_SPECIAL_BBR4 = 0x4F,  // WDC only
	INSTRUCTION_SPECIAL_BBR5 = 0x5F,  // WDC only
	INSTRUCTION_SPECIAL_BBR6 = 0x6F,  // WDC only
	INSTRUCTION_SPECIAL_BBR7 = 0x7F,  // WDC only

	// BBS#
	INSTRUCTION_SPECIAL_BBS0 = 0x8F,  // WDC only
	INSTRUCTION_SPECIAL_BBS1 = 0x9F,  // WDC only
	INSTRUCTION_SPECIAL_BBS2 = 0xAF,  // WDC only
	INSTRUCTION_SPECIAL_BBS3 = 0xBF,  // WDC only
	INSTRUCTION_SPECIAL_BBS4 = 0xCF,  // WDC only
	INSTRUCTION_SPECIAL_BBS5 = 0xDF,  // WDC only
	INSTRUCTION_SPECIAL_BBS6 = 0xEF,  // WDC only
	INSTRUCTION_SPECIAL_BBS7 = 0xFF,  // WDC only

	// RMB#
	INSTRUCTION_SPECIAL_RMB0 = 0x07,  // WDC only
	INSTRUCTION_SPECIAL_RMB1 = 0x17,  // WDC only
	INSTRUCTION_SPECIAL_RMB2 = 0x27,  // WDC only
	INSTRUCTION_SPECIAL_RMB3 = 0x37,  // WDC only
	INSTRUCTION_SPECIAL_RMB4 = 0x47,  // WDC only
	INSTRUCTION_SPECIAL_RMB5 = 0x57,  // WDC only
	INSTRUCTION_SPECIAL_RMB6 = 0x67,  // WDC only
	INSTRUCTION_SPECIAL_RMB7 = 0x77,  // WDC only

	// SMB#
	INSTRUCTION_SPECIAL_SMB0 = 0x87,  // WDC only
	INSTRUCTION_SPECIAL_SMB1 = 0x97,  // WDC only
	INSTRUCTION_SPECIAL_SMB2 = 0xA7,  // WDC only
	INSTRUCTION_SPECIAL_SMB3 = 0xB7,  // WDC only
	INSTRUCTION_SPECIAL_SMB4 = 0xC7,  // WDC only
	INSTRUCTION_SPECIAL_SMB5 = 0xD7,  // WDC only
	INSTRUCTION_SPECIAL_SMB6 = 0xE7,  // WDC only
	INSTRUCTION_SPECIAL_SMB7 = 0xF7,  // WDC only

	// STP
	INSTRUCTION_SPECIAL_STP = 0xDB,	 // WDC only

	// STZ
	INSTRUCTION_SPECIAL_STZ_ZPG = 0x64,	   // WDC only
	INSTRUCTION_SPECIAL_STZ_ZPG_X = 0x74,  // WDC only
	INSTRUCTION_SPECIAL_STZ_ABS = 0x9C,	   // WDC only
	INSTRUCTION_SPECIAL_STZ_ABS_X = 0x9E,  // WDC only

	// TRB
	INSTRUCTION_SPECIAL_TRB_ABS = 0x1C,	 // WDC only
	INSTRUCTION_SPECIAL_TRB_ZPG = 0x14,	 // WDC only

	// TSB
	INSTRUCTION_SPECIAL_TSB_ABS = 0x0C,	 // WDC only
	INSTRUCTION_SPECIAL_TSB_ZPG = 0x04,	 // WDC only

	// WAI
	INSTRUCTION_SPECIAL_WAI = 0xCB,	 // WDC only

	// x3: NOP 1 byte 1 cycle           WDC only
	// xB: NOP 1 byte 1 cycle           WDC only
	// 44: NOP 2 bytes 3 cycles         WDC only
	// 54, F4: NOP 2 bytes 4 cycles     WDC only
	// DC, FC: NOP 3 bytes 4 cycles     WDC only
	// 5C: NOP 3 bytes 8 cycles         WDC only
} InstructionSpecial;

typedef void (*InstructionFunc)(CPU*, uint8_t);

extern const InstructionFunc instructionTable[256];

#endif